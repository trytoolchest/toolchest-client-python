version: 2.1
orbs:
  python: circleci/python@1.4.0
jobs:
  deploy-to-pypi:
    executor: python/default
    working_directory: ~/repo
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Build and publish to PyPI
          command: |
            cd ~/repo
            PYPI_ENVIRONMENT=$([[ $CIRCLE_BRANCH = main ]] && echo prod-pypi || echo test-pypi)
            PYPI_ACCESS_TOKEN=$([[ $PYPI_ENVIRONMENT = prod-pypi ]] && echo $PYPI_PROD_TOKEN || echo $PYPI_TEST_TOKEN)
            poetry config pypi-token.$PYPI_ENVIRONMENT $PYPI_ACCESS_TOKEN
            poetry publish --build -r $PYPI_ENVIRONMENT
  unit-tests:
    executor: python/default
    working_directory: ~/repo
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run unit tests
          command: |
            cd ~/repo
            poetry install
            poetry run pytest -v -m "not integration"
  integration-tests:
    executor: python/default
    working_directory: ~/repo
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Create AWS credentials manually
          command: |
            mkdir ~/.aws
            touch ~/.aws/config
            chmod 600 ~/.aws/config
            echo "[profile circleci]" > ~/.aws/config
            echo "aws_access_key_id=$AWS_ACCESS_KEY_ID" >> ~/.aws/config
            echo "aws_secret_access_key=$AWS_SECRET_ACCESS_KEY" >> ~/.aws/config
      - python/install-packages:
          pkg-manager: poetry
      - run:
          name: Run integration tests
          parallel: true
          command: |
            cd ~/repo
            export DEPLOY_ENVIRONMENT=$([[ $CIRCLE_BRANCH = main ]] && echo production || echo staging)
            shopt -s globstar
            TESTFILES=$(circleci tests glob tests/**/test*.py | circleci tests split --split-by=filesize)
            shopt -u globstar
            poetry install
            mkdir -p test-results
            poetry run pytest -v -m integration --junitxml=test-results/junit.xml $TESTFILES
          no_output_timeout: 1h
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
workflows:
  test:
    jobs:
      - unit-tests
      - integration-tests:
          filters:
            branches:
              only:
                - main
                - staging
                - devops/pytest-parallelism
  deploy:
    jobs:
      - deploy-to-pypi:
          filters:
            branches:
              only:
                - main
                - staging
