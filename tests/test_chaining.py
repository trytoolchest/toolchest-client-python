import os
import pytest

from tests.util import s3, hash
import toolchest_client as toolchest

toolchest_api_key = os.environ.get("TOOLCHEST_API_KEY")
if toolchest_api_key:
    toolchest.set_key(toolchest_api_key)

SHI7_SINGLE_END_HASH = 1570879637
SHOGUN_CHAINED_HASH = 33856653


@pytest.mark.integration
def test_shi7_shogun_chaining():
    """
    Tests S3-based chaining with shi7 and shogun. Passes the S3 URI of the
    shi7 output to shogun as input. Downloads both the (intermediate) shi7
    output and the (final) shogun output to hash for testing.

    To enforce shi7 determinism, a single R1 input is used.

    Note: This test also tests the Output object generated by the shi7() tool call,
    and chaining the shi7 output files depends on how the Output is structured.
    If the Output class is modified, this test should be modified as well.
    """

    test_dir = "test_shi7_shogun_chaining"
    os.makedirs(f"./{test_dir}", exist_ok=True)
    output_dir_path = f"./{test_dir}/"
    output_file_path_shi7 = f"{output_dir_path}combined_seqs.fna"
    output_file_path_shogun = f"{output_dir_path}alignment.burst.b6"

    output_shi7 = toolchest.shi7(
        tool_args="-SE",
        inputs="s3://toolchest-integration-tests-public/sample_r1.fastq.gz",
        output_path=output_file_path_shi7,
    )

    # Note: since shi7 produces multiple files, output_shi7.output_path
    # is a list of paths to each unpacked output file, so we check whether
    # it is a list instead.
    assert hash.unordered(output_file_path_shi7) == SHI7_SINGLE_END_HASH
    assert isinstance(output_shi7.output_path, list)

    output_shogun = toolchest.shogun(
        inputs=output_shi7.s3_uri,
        output_path=output_file_path_shogun,
    )

    assert hash.unordered(output_file_path_shogun) == SHOGUN_CHAINED_HASH
    assert hash.unordered(output_shogun.output_path) == SHOGUN_CHAINED_HASH

