import os
import pytest

from tests.util import s3, hash
import toolchest_client as toolchest

toolchest_api_key = os.environ.get("TOOLCHEST_API_KEY")
if toolchest_api_key:
    toolchest.set_key(toolchest_api_key)

# Because shi7 paired-end is non-deterministic, we just make sure it's not equal to the single-end version
SHI7_SINGLE_END_HASH = 1570879637


@pytest.mark.integration
def test_shi7_single_end():
    """
    Tests shi7 with a single R1 input

    Note: This test also tests the Output object generated by the shi7() tool call,
    and chaining the shi7 output files depends on how the Output is structured.
    If the Output class is modified, this test should be modified as well.
    """

    test_dir = "./temp_test_shi7_single_end"
    os.makedirs(test_dir, exist_ok=True)
    input_one_file_path = f"{test_dir}/shi7_input_R1.fastq.gz"
    output_file_path = f"{test_dir}/combined_seqs.fna"

    s3.download_integration_test_input(
        s3_file_key="sample_r1.fastq.gz",
        output_file_path=input_one_file_path,
    )

    output_shi7 = toolchest.shi7(
        tool_args="-SE",
        inputs=test_dir,
        output_path=test_dir,
    )

    # Note: since shi7 produces multiple files, output_shi7.output_path
    # should be a list of paths to each unpacked output file.
    assert hash.unordered(output_file_path) == SHI7_SINGLE_END_HASH
    assert isinstance(output_shi7.output_file_paths, list)


@pytest.mark.integration
def test_shi7_paired_end():
    """
    Tests shi7 with paired-end inputs

    Unfortunately, shi7 is non-deterministic. This means we can't check a hash.
    As a means of having some level of guarantee, we check the output file size instead.

    Because of this, we should not recommend shi7 for use.
    """

    test_dir = "./temp_test_shi7_paired_end"
    os.makedirs(test_dir, exist_ok=True)
    input_one_file_path = f"{test_dir}/shi7_input_R1.fastq.gz"
    input_two_file_path = f"{test_dir}/shi7_input_R2.fastq.gz"
    output_file_path = f"{test_dir}/combined_seqs.fna"

    s3.download_integration_test_input(
        s3_file_key="sample_r1.fastq.gz",
        output_file_path=input_one_file_path,
    )
    s3.download_integration_test_input(
        s3_file_key="sample_r2.fastq.gz",
        output_file_path=input_two_file_path,
    )

    toolchest.shi7(
        inputs=test_dir,
        output_path=test_dir,
    )

    # Because shi7 paired-end is non-deterministic, we just make sure it's not equal to the single-end version
    assert hash.unordered(output_file_path) != SHI7_SINGLE_END_HASH
